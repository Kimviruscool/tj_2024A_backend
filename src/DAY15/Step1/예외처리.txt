예외처리
    -오류/에러(ERROR) : 시스템이 종료되는 수준의 심각한 문제를 발생
        -프로그램개발자가 예측하여 방지가 힘들다. 주로 하드웨어(메모리,CPU) 관련
    -예외(Exception) : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영항에 의해 발생
        -오류와 달리 프로그램개발자가 예측하여 방지가 가능. 경험이 중요시 한다.
    예외 종류
    (컴파일러 : 특정 프로그래밍 언어로 쓰여 있는 문서를 다른 프로그래밍 언어로 옮기는 언어 번역 프로그램)
    (나의 해석 : 각 언어에 맞게 프로그래밍 언어로 번역하는것.)

    1. 일반예외 : 컴파일러가/실행시 예외 처리 코드 여부를 검사하는 예외
        - 주로 외부 시스템과 연동시 발생 : 입(키보드)출력 , 파일(윈도우)처리 , 네트워크 , JDBC(자바-DB) 등등
        -
    2. 실행예외 : 컴파일러가/실행시 예외 처리 코드 여부를 검사하지 않는 예외
        - 실행 도중에 발생 : null, 타입관련 , 인덱스 등등
        - 개발자의 경험의 의존성이 크다. 꼼꼼해야 한다.

    예외 처리란 : 예외가 발생했을때 다른 흐름으로 제어 - 예외를 고치거나 코드를 수정하거나 작업이 아니다.
        - IF랑 비슷하면서 다르다.
        - 이유 : 예외 발생하면 빨강색으로 콘솔에 예외사유가 나오면서 프로그램 종료
            - 프로그램 배포시 사용자가 안전하게 24시간 사용시 예외가 발생하더라도 다른 흐름으로 제어해서 안전한 프로그램 완성하기 위해서
            - 추후에 예외 관련해서 코드 수정 하거나 대안 방안
        - 문법
            try {예외 발생 하거나 발생 할것 같은(예측) 코드}
            catch( 해당예외클래스명 객체변수명){예외 발생 했을때 코드}
            catch( 해당예외클래스명 객체변수명){예외 발생 했을때 코드}
            catch( 해당예외클래스명 객체변수명){예외 발생 했을때 코드}
            finally{예외가 있던 말던 실행되는 코드}
            //-- 가독성을 높이기 위해 , 주로 다른 연동 시스템 과 해제하는 코드 입력시
        - 다중 catch 주의할점
            - Exception 클래스 가장 마지막에 작성하자.
            -

    예외 클래스
    - 예외 발생하면 JVM에 예외 발생사유가 저장되는 각 클래스에 객체 생성
        - Exception 클래스
            - ClassNotFoundException : 해당 클래스를 못찾았을때 발생하는 예외를 관리하는 클래스
            - NullPointerException : 해당 변수의 참조(주소)가 없는데 .(도트/접근) 연산자를 사용 시 발생하는 문제를 관리하는 클래스
            - NumberFormatException : 숫자형 타입변환을 할수 없을 때 예외가 발생 하는 클래스
            - ArrayIndexOutOfBoundsException : 존재하지 않는 인덱스를 접근할때 발생하는 예외 클래스
            - InputMismatchException : 입력시 타입이 일치 하지 않을 때 발생하는 예외 클래스
            - 등등
    예외 던지기 / 떠넘기기
    - 여러곳에서 발생하는 예외를 특정한 곳에서 한번에 처리하기 위해서
    - 쓰레기를 쓰레기장에 버리면 폐기물차가 수거해서 특정한 폐기물 소각장에서 처리
    - 예외를 던지면 특정한 곳에서 예외 처리